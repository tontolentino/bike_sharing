geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by month by weekday
df1 <- df %>%
group_by(mnth, weathersit) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = mnth, y = mean_count, color = weathersit),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Lineplot of mean count by month by weekday
df1 <- df %>%
group_by(mnth, weathersit) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
# Lineplot of mean count by month by weekday
df1 <- df %>%
group_by(mnth, weathersit) %>%
summarise(mean_count = mean(cnt))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = weathersit),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Lineplot of mean count by hour by type of user
df1 <- df2 %>%
group_by(mnth, user) %>%
summarise(mean_count = mean(count))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = user),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Histogram:
ggplot(aes(x = temp, fill = season), data = df) +
geom_histogram() +
scale_color_brewer(type = 'div')
ggplot(aes(x = hr, y = cnt), data = hour) +
geom_point(position = position_jitter(), alpha = 0.55, size = 0.4) +
scale_color_brewer(type = 'div')
gplot(aes(x = temp, fill = season), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = temp, fill = season), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = temp, fill = hr), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = temp, fill = weathersit), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = temp, fill = weekday), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = temp,y = cnt, fill = weekday), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = temp, fill = weekday), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
df1 <- df %>%
group_by(mnth, weekday) %>%
summarise(mean_count = mean(cnt))
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(psych)
library(dplyr)
library(tidyr)
# Load the Data
hour <- read.csv('hour.csv')
# Lineplot of mean count by hour and weekday
df1 <- df %>%
group_by(hr, weekday) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by month day and weekday
df1 <- df %>%
group_by(day, season) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = day, y = mean_count, color = season),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 1))
# Lineplot of mean count by month day and weekday (excluding holidays)
df1 <- df %>%
group_by(day, season, holiday) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = day, y = mean_count, color = season),
data = subset(df1, holiday == 0)) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 1))
# Lineplot of mean count by month and weekday
df1 <- df %>%
group_by(mnth, weekday) %>%
summarise(mean_count = mean(cnt))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = weekday),
data = subset(df1, holiday == 0)) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
df1 <- df %>%
group_by(mnth, weekday, holiday) %>%
summarise(mean_count = mean(cnt))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = weekday),
data = subset(df1, holiday == 0)) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Lineplot of mean count by hour and weekday
df1 <- df %>%
group_by(hr, weekday) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by month day and weekday
df1 <- df %>%
group_by(day, season) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = day, y = mean_count, color = season),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 1))
# Lineplot of mean count by month day and weekday (excluding holidays)
df1 <- df %>%
group_by(day, season, holiday) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = day, y = mean_count, color = season),
data = subset(df1, holiday == 0)) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 1))
# Lineplot of mean count by month and weekday
df1 <- df %>%
group_by(mnth, weekday) %>%
summarise(mean_count = mean(cnt))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = weekday),
df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
ggplot(aes(x = mnth, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Lineplot of mean count by hour and weekday
df1 <- df %>%
group_by(hr, weekday) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by month day and weekday
df1 <- df %>%
group_by(day, season) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = day, y = mean_count, color = season),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 1))
# Lineplot of mean count by month day and weekday (excluding holidays)
df1 <- df %>%
group_by(day, season, holiday) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = day, y = mean_count, color = season),
data = subset(df1, holiday == 0)) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 1))
# Lineplot of mean count by month and weekday
df1 <- df %>%
group_by(mnth, weekday) %>%
summarise(mean_count = mean(cnt))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Lineplot of mean count by hour and weekday
df1 <- df %>%
group_by(hr, weekday) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by month day and weekday
df1 <- df %>%
group_by(day, season) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = day, y = mean_count, color = season),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 1))
# Lineplot of mean count by month day and weekday (excluding holidays)
df1 <- df %>%
group_by(day, season, holiday) %>%
summarise(mean_count = mean(cnt))
ggplot(aes(x = day, y = mean_count, color = season),
data = subset(df1, holiday == 0)) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 1))
# Lineplot of mean count by month and weekday
df1 <- df %>%
group_by(mnth, weekday) %>%
summarise(mean_count = mean(cnt))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
View(df1)
View(df)
df1 <- df %>%
group_by(hr, season, workingday) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = season),
data = subset(df1, workingday == 0)) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
ggplot(aes(x = hr, y = mean_count, color = season),
data = subset(df1, workingday == 1)) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
ggplot(aes(x = hr, y = mean_count, color = season),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
df1 <- df %>%
group_by(hr, season) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = season),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by hour by hour and type of user
df2 <- gather(df, user, count, casual:registered)
df1 <- df2 %>%
group_by(hr, user) %>%
summarise(mean_count = mean(count))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = user),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by month by weekday
df1 <- df %>%
group_by(mnth, weathersit) %>%
summarise(mean_count = mean(cnt))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = weathersit),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Lineplot of mean count by hour by type of user
df1 <- df2 %>%
group_by(mnth, user) %>%
summarise(mean_count = mean(count))
df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = mnth, y = mean_count, color = user),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Lineplot of mean count by hour by type of user
df1 <- df2 %>%
group_by(weekday, user) %>%
summarise(mean_count = mean(count))
df1$mnth <- as.integer(df1$mnth)
# Lineplot of mean count by hour by type of user
df1 <- df2 %>%
group_by(weekday, user) %>%
summarise(mean_count = mean(count))
#df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = weekday, y = mean_count, color = user),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 12, 1))
# Lineplot of mean count by hour by type of user
df1 <- df2 %>%
group_by(weekday, user) %>%
summarise(mean_count = mean(count))
#df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = weekday, y = mean_count, color = user),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal()
# Lineplot of mean count by hour by type of user
df1 <- df2 %>%
group_by(weekday, user) %>%
summarise(mean_count = mean(count))
#df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = weekday, y = mean_count, color = user),
data = df1) +
geom_bar() +
theme_minimal()
# Lineplot of mean count by hour by type of user
df1 <- df2 %>%
group_by(weekday, user) %>%
summarise(mean_count = mean(count))
#df1$mnth <- as.integer(df1$mnth)
ggplot(aes(x = weekday, y = mean_count, color = user),
data = df1) +
geom_col() +
theme_minimal()
ggplot(aes(x = temp, fill = weathersit), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = temp, fill = weekday), data = df) +
geom_histogram() +
facet_wrap(df$season) +
scale_fill_brewer(type = 'qual')
# Histogram:
ggplot(aes(x = temp, fill = season), data = df) +
geom_histogram() +
scale_color_brewer(type = 'div')
ggplot(aes(x = hr, y = cnt), data = hour) +
geom_point(position = position_jitter(), alpha = 0.55, size = 0.4) +
scale_color_brewer(type = 'div')
# Load the Data
hour <- read.csv('hour.csv')
# Plot histogram of "temp" by "season":
ggplot(aes(x = temp), data = df) +
geom_histogram(binwidth = 1) +
theme_minimal()
# Boxplot of count by hour
ggplot(aes(x = hr, y = cnt),
data = df) +
geom_boxplot()
# Boxplot of count by hour
ggplot(aes(x = hr, y = cnt),
data = df) +
geom_boxplot() +
labs(x = "Hour of Day", "Bike Count")
# Boxplot of count by hour
ggplot(aes(x = hr, y = cnt),
data = df) +
geom_boxplot() +
labs(x = "Hour of Day", y ="Bike Count")
# Boxplot of count by hour
ggplot(aes(x = hr, y = cnt),
data = df) +
geom_boxplot() +
labs(x = "Hour of Day", y ="Bike Count") +
ggtitle("Boxplot of Bike Count by Hour of Day")
# Boxplot of count by hour
ggplot(aes(x = hr, y = cnt),
data = df) +
geom_boxplot() +
labs(x = "Hour of Day", y ="Bike Count") +
ggtitle("Boxplot of Bike Count by Hour of Day") +
theme_minimal()
# Lineplot of mean count by hour and weekday
df1 <- df %>%
group_by(hr, weekday) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
labs(x = "Hour of Day", y ="Bike Count") +
ggtitle("Boxplot of Bike Count by Hour of Day") +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by hour and weekday
df1 <- df %>%
group_by(hr, weekday) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = weekday),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
labs(x = "Hour of Day", y ="Bike Mean Count") +
ggtitle("Lineplot of Bike Mean Count by Hour of Day and Weekday") +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by hour and season
df1 <- df %>%
group_by(hr, season) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = season),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
labs(x = "Hour of Day", y ="Bike Mean Count") +
ggtitle("Lineplot of Bike Mean Count by Hour of Day and Weekday") +
scale_x_continuous(breaks = seq(0, 24, 1))
# Lineplot of mean count by hour and season
df1 <- df %>%
group_by(hr, season) %>%
summarise(mean_count = mean(cnt))
df1$hr <- as.integer(df1$hr)
ggplot(aes(x = hr, y = mean_count, color = season),
data = df1) +
geom_line() +
geom_point(size = 1) +
theme_minimal() +
labs(x = "Hour of Day", y ="Bike Mean Count") +
ggtitle("Lineplot of Bike Mean Count by Hour of Day and Season") +
scale_x_continuous(breaks = seq(0, 24, 1))
getwd()
setwd("/Users/tontolentino/Downloads/Bike-Sharing-Dataset/")
# Load the Data
hour <- read.csv('hour.csv')
getwd()
list.files()
h <- read.csv('hour.csv')
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(psych)
library(dplyr)
library(tidyr)
# Load the Data
hour <- read.csv('hour.csv')
